# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DegreesMinuteSecondsCalculator_v2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import *
from PyQt5.QtGui import QIntValidator
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QApplication,QLineEdit,QWidget,QFormLayout
from PyQt5.QtWidgets import *

class Ui_Dialog(object):
    
    def setupUi(self, title, initial_value=None):
        title = 'Degree Minute Seconds Calculator'
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 137)
        self.angle1 = QLineEdit(Dialog)
        self.angle1.setValidator(QIntValidator())
        self.angle1.setGeometry(QRect(100, 20, 31, 20))
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.angle1.sizePolicy().hasHeightForWidth())
        self.angle1.setSizePolicy(sizePolicy)
        self.angle1.setInputMethodHints(Qt.ImhDigitsOnly)
        self.angle1.setMaxLength(3)
        self.angle1.setAlignment(Qt.AlignCenter)
        self.angle1.setClearButtonEnabled(False)
        self.angle1.setObjectName("angle1")
        self.newAngle = QLineEdit(Dialog)
        self.newAngle.setGeometry(QRect(100, 80, 191, 51))
        font = QFont()
        font.setPointSize(14)
        self.newAngle.setFont(font)
        self.newAngle.setAlignment(Qt.AlignCenter)
        self.newAngle.setObjectName("newAngle")
        self.newAngle_label = QLabel(Dialog)
        self.newAngle_label.setGeometry(QRect(20, 70, 81, 51))
        font = QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.newAngle_label.setFont(font)
        self.newAngle_label.setObjectName("newAngle_label")
        self.AngleLabel = QLabel(Dialog)
        self.AngleLabel.setGeometry(QRect(20, 20, 71, 16))
        font = QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.AngleLabel.setFont(font)
        self.AngleLabel.setScaledContents(True)
        self.AngleLabel.setAlignment(Qt.AlignRight|Qt.AlignTrailing|Qt.AlignVCenter)
        self.AngleLabel.setObjectName("AngleLabel")
        self.addition_rad = QRadioButton(Dialog)
        self.addition_rad.setText('plus')
        self.addition_rad.setGeometry(QRect(260, 20, 82, 17))
        self.addition_rad.setObjectName("addition_rad")
        self.subtraction_rad = QRadioButton(Dialog)
        self.subtraction_rad.setText('minusa')
        self.subtraction_rad.setGeometry(QRect(260, 50, 82, 17))
        self.subtraction_rad.setChecked(True)
        self.subtraction_rad.setObjectName("subtraction_rad")
        self.angle2 = QLineEdit(Dialog)
        self.angle2.setValidator(QIntValidator())
        self.angle2.setEnabled(True)
        self.angle2.hide()
        self.angle2.setGeometry(QRect(100, 50, 31, 20))
        self.angle2.setInputMethodHints(Qt.ImhDigitsOnly)
        self.angle2.setMaxLength(3)
        self.angle2.setFrame(True)
        self.angle2.setAlignment(Qt.AlignCenter)
        self.angle2.setObjectName("angle2")
        self.AngleLabel_2 = QLabel(Dialog)
        self.AngleLabel_2.setEnabled(True)
        self.AngleLabel_2.hide()
        self.AngleLabel_2.setGeometry(QRect(20, 50, 71, 16))
        font = QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.AngleLabel_2.setFont(font)
        self.AngleLabel_2.setScaledContents(True)
        self.AngleLabel_2.setAlignment(Qt.AlignRight|Qt.AlignTrailing|Qt.AlignVCenter)
        self.AngleLabel_2.setObjectName("AngleLabel_2")
        self.okBtn = QPushButton(Dialog)
        self.okBtn.setGeometry(QRect(310, 80, 75, 23))
        self.okBtn.setObjectName("okBtn")
        self.clearBtn = QPushButton(Dialog)
        self.clearBtn.setGeometry(QRect(310, 110, 75, 23))
        self.clearBtn.setObjectName("clearBtn")
        self.angle1_2 = QLineEdit(Dialog)
        self.angle1_2.setValidator(QIntValidator())
        self.angle1_2.setGeometry(QRect(130, 20, 31, 20))
        self.angle1_2.setInputMethodHints(Qt.ImhDigitsOnly)
        self.angle1_2.setMaxLength(2)
        self.angle1_2.setAlignment(Qt.AlignCenter)
        self.angle1_2.setObjectName("angle1_2")
        self.angle1_3 = QLineEdit(Dialog)
        self.angle1_3.setValidator(QIntValidator())
        self.angle1_3.setGeometry(QRect(160, 20, 31, 20))
        self.angle1_3.setInputMethodHints(Qt.ImhDigitsOnly)
        self.angle1_3.setMaxLength(2)
        self.angle1_3.setAlignment(Qt.AlignCenter)
        self.angle1_3.setObjectName("angle1_3")
        self.angle2_2 = QLineEdit(Dialog)
        self.angle2_2.setValidator(QIntValidator())
        self.angle2_2.setEnabled(True)
        self.angle2_2.hide()
        self.angle2_2.setGeometry(QRect(130, 50, 31, 20))
        self.angle2_2.setInputMethodHints(Qt.ImhDigitsOnly)
        self.angle2_2.setMaxLength(2)
        self.angle2_2.setFrame(True)
        self.angle2_2.setAlignment(Qt.AlignCenter)
        self.angle2_2.setObjectName("angle2_2")
        self.angle2_3 = QLineEdit(Dialog)
        self.angle2_3.setValidator(QIntValidator())
        self.angle2_3.setEnabled(True)
        self.angle2_3.hide()
        self.angle2_3.setGeometry(QRect(160, 50, 31, 20))
        self.angle2_3.setInputMethodHints(Qt.ImhDigitsOnly)
        self.angle2_3.setMaxLength(2)
        self.angle2_3.setFrame(True)
        self.angle2_3.setAlignment(Qt.AlignCenter)
        self.angle2_3.setObjectName("angle2_3")
        self.newAngle_label.setBuddy(self.newAngle)
        self.AngleLabel.setBuddy(self.angle1)
        self.AngleLabel_2.setBuddy(self.angle2)

        self.retranslateUi(Dialog)
        self.addition_rad.clicked.connect(self.addition_rad.show) # type: ignore
        self.addition_rad.clicked.connect(self.angle2.show) # type: ignore
        self.addition_rad.clicked.connect(self.AngleLabel_2.show) # type: ignore
        self.subtraction_rad.clicked.connect(self.angle2.hide) # type: ignore
        self.subtraction_rad.clicked.connect(self.AngleLabel_2.hide) # type: ignore
        self.clearBtn.clicked.connect(self.newAngle.clear) # type: ignore
        self.clearBtn.clicked.connect(self.angle1.clear) # type: ignore
        self.clearBtn.clicked.connect(self.angle2.clear) # type: ignore
        self.subtraction_rad.clicked.connect(self.angle2_2.hide) # type: ignore
        self.subtraction_rad.clicked.connect(self.angle2_3.hide) # type: ignore
        self.clearBtn.clicked.connect(self.angle2_2.clear) # type: ignore
        self.clearBtn.clicked.connect(self.angle2_3.clear) # type: ignore
        self.clearBtn.clicked.connect(self.angle1_2.clear) # type: ignore
        self.clearBtn.clicked.connect(self.angle1_3.clear) # type: ignore
        self.addition_rad.clicked.connect(self.angle2_2.show) # type: ignore
        self.addition_rad.clicked.connect(self.angle2_3.show) # type: ignore
        QMetaObject.connectSlotsByName(Dialog)
        Dialog.setTabOrder(self.angle1, self.angle1_2)
        Dialog.setTabOrder(self.angle1_2, self.angle1_3)
        Dialog.setTabOrder(self.angle1_3, self.subtraction_rad)
        Dialog.setTabOrder(self.subtraction_rad, self.addition_rad)
        Dialog.setTabOrder(self.addition_rad, self.angle2)
        Dialog.setTabOrder(self.angle2, self.angle2_2)
        Dialog.setTabOrder(self.angle2_2, self.angle2_3)
        Dialog.setTabOrder(self.angle2_3, self.okBtn)
        Dialog.setTabOrder(self.okBtn, self.newAngle)
        Dialog.setTabOrder(self.newAngle, self.clearBtn)


    def check(self):
            
        if self.addition_rad.isChecked():
            self.okBtn.clicked.connect(self.addAngles)
        elif self.subtraction_rad.isChecked():
            self.okBtn.clicked.connect(self.subAngles)

    def subAngles(self):
        
        cell1 = int(self.angle1.text())
        cell2 = int(self.angle1_2.text())
        cell3 = int(self.angle1_3.text())
        '''
        subLstA = [180,0,0]
        subLstB = [179,60,0]
        subLstC = [179,59,60]
        '''
        if cell2 == 0 and cell3 == 0:
            box1 = 180 - cell1
            box2 = 0
            box3 = 0
            ansr ="{}°{}\'{}\"".format(box1,box2,box3)
            self.newAngle.setText(ansr)
        elif cell2 != 0 and cell3 ==0:
            box1 = 179 - cell1
            box2 = 60 - cell2
            box3 = 0
            ansr = "{}°{}\'{}\"".format(box1,box2,box3)
            self.newAngle.setText(ansr)
        else:
            box1 = 179 - cell1
            box2 = 59 - cell2
            box3 = 60 - cell3
            ansr = "{}°{}\'{}\"".format(box1,box2,box3)
        self.newAngle.setText(ansr)

    def addAngles(self):
        
        ang1 = int(self.angle1.text())
        ang2 = int(self.angle1_2.text())
        ang3 = int(self.angle1_3.text())
        ang1_1= int(self.angle2.text())
        ang2_2= int(self.angle2_2.text())
        ang3_3= int(self.angle2_3.text())

        if (ang3 + ang3_3) >= 60 and (ang2 + ang2_2) < 60:
            lstC2 = (ang3 + ang3_3) - 60
            lstC1 = (ang2 + ang2_2)
            lstC0 = (ang1 + ang1_1)
        elif (ang3 + ang3_3) >= 60 and (ang2 + ang2_2) >= 60:
            lstC2 = (ang3 + ang3_3) - 60
            lstC1 = ((ang2 + ang2_2)+1) - 60
            lstC0 = (ang1 + ang1_1) + 1
        elif (ang3 + ang3_3) < 60 and (ang2 + ang2_2) >= 60:
            lstC2 = (ang3 + ang3_3) 
            lstC1 = (ang2 + ang2_2) - 60
            lstC0 = (ang1 + ang1_1) + 1
        elif (ang3 + ang3_3) < 60 and (ang2 + ang2_2) < 60:
            lstC2 = (ang3 + ang3_3)
            lstC1 = (ang2 + ang2_2)
            lstC0 = (ang1 + ang1_1)
        ansr = "{}°{}\'{}\"".format(lstC0,lstC1,lstC2)
        self.newAngle.setText(ansr)
    
    def retranslateUi(self, Dialog):
        global boo
        _translate = QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Angle Calculator"))
#        Dialog.setWindowFlags(Qt.FramelessWindowHint)
        self.angle1.setPlaceholderText(_translate("Dialog", "0"))
        self.newAngle_label.setText(_translate("Dialog", "NEW ANGLE:"))
        self.AngleLabel.setText(_translate("Dialog", "Angle"))
        self.addition_rad.setText(_translate("Dialog", "Addition"))
        self.subtraction_rad.setText(_translate("Dialog", "Subtraction"))
        self.angle2.setPlaceholderText(_translate("Dialog", "0"))
        self.AngleLabel_2.setText(_translate("Dialog", "Angle 2"))
        self.okBtn.setText(_translate("Dialog", "OK"))
        self.clearBtn.setText(_translate("Dialog", "Clear"))
        self.angle1_2.setPlaceholderText(_translate("Dialog", "0"))
        self.angle1_3.setPlaceholderText(_translate("Dialog", "0"))
        self.angle2_2.setPlaceholderText(_translate("Dialog", "0"))
        self.angle2_3.setPlaceholderText(_translate("Dialog", "0"))
        self.addition_rad.clicked.connect(self.check)
        self.subtraction_rad.clicked.connect(self.check)
        self.okBtn.clicked.connect(self.check)

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    Dialog = QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
